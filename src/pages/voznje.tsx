import React, { useState, useEffect } from "react";
import Head from "next/head";
import Navbar from "~/components/Navbar";
import { api } from "~/utils/api";
import InputVoznik from "~/components/InputVoznik";
import { useSession } from "next-auth/react";

interface VoznjaDataRow {
  voznja_id: number;
  datum: Date;
  zac_km: number;
  kon_km: number;
  namen: string;
  voznik: string;
}

export default function Voznje() {
  const { data, error, isLoading, refetch } = api.post.get_voznja.useQuery();
  const createNew = api.post.add_voznja.useMutation();
  const deleteRows: ReturnType<typeof api.post.delete_voznja.useMutation> =
    api.post.delete_voznja.useMutation();
  const [lastVoznjaId, setLastVoznjaId] = useState<number>(0);
  const [lastKonKm, setLastKonKm] = useState<number>(0);
  const [selectedRows, setSelectedRows] = useState<number[]>([]);

  const { data: sessionData } = useSession();

  React.useEffect(() => {
    const delayRedirect = setTimeout(() => {
      if (!sessionData) {
        window.location.href = "/";
      }
    }, 1000);

    return () => clearTimeout(delayRedirect);
  }, [sessionData]);

  const handleAddMember = async (newMemberData: VoznjaDataRow) => {
    try {
      await createNew.mutateAsync(newMemberData);
      await refetch();
      console.log(newMemberData);
      console.log("New member added:");
    } catch (error) {
      console.error("Error adding new member:");
    }
  };

  useEffect(() => {
    if (data && data.length > 0) {
      const firstData = data[0];
      if (firstData) {
        setLastVoznjaId(firstData.voznja_id + 1);
        setLastKonKm(firstData.kon_km);
        console.log("First voznja_id:", firstData.voznja_id);
        console.log("First kon_km:", firstData.kon_km);
      } else {
        console.error("Error: firstData is undefined");
      }
    }
  }, [data]);

  const handleCheckboxChange = (voznjaId: number) => {
    if (selectedRows.includes(voznjaId)) {
      setSelectedRows(selectedRows.filter((id) => id !== voznjaId));
    } else {
      setSelectedRows([...selectedRows, voznjaId]);
    }
  };

  const handleDeleteSelectedRows = async () => {
    try {
      await deleteRows.mutateAsync(selectedRows);
      await refetch();
      setSelectedRows([]);
      console.log("Selected rows deleted successfully");
    } catch (error) {
      console.error("Error deleting selected rows:", error);
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  if (!sessionData) {
    return null;
  }

  return (
    <>
      <Head>
        <title>MojPGD</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <div className="flex w-full flex-col items-center justify-center">
        <div className="navbar">
          <Navbar />
        </div>
      </div>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#111827] to-magenta">
        <div
          className="custom-table-container mb-6 mt-16 "
          style={{ maxHeight: "330px" }}
        >
          <table className="custom-table">
            <thead>
              <tr>
                <th></th>
                <th>Voznja ID</th>
                <th>Datum</th>
                <th>Začetni kilometri</th>
                <th>Končni kilometri</th>
                <th>Namen</th>
                <th>Voznik</th>
              </tr>
            </thead>
            <tbody>
              {data.map((voznja) => (
                <tr key={voznja.voznja_id}>
                  <td>
                    <div className="checkbox-wrapper-31">
                      <input
                        type="checkbox"
                        onChange={() => handleCheckboxChange(voznja.voznja_id)}
                        checked={selectedRows.includes(voznja.voznja_id)}
                      />
                      <svg viewBox="0 0 35.6 35.6">
                        <circle
                          className="background"
                          cx="17.8"
                          cy="17.8"
                          r="9.8"
                        ></circle>
                        <circle
                          className="stroke"
                          cx="17.8"
                          cy="17.8"
                          r="11.37"
                        ></circle>
                        <polyline
                          className="check"
                          points="11.78 18.12 15.55 22.23 25.17 12.87"
                        ></polyline>
                      </svg>
                    </div>
                  </td>
                  <td>{voznja.voznja_id}</td>
                  <td>{voznja.datum.toLocaleDateString()}</td>
                  <td>{voznja.zac_km}</td>
                  <td>{voznja.kon_km}</td>
                  <td>{voznja.namen}</td>
                  <td>{voznja.voznik}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <div
          className={`transform rounded-md px-9 py-3 no-underline transition duration-500 ease-in-out hover:-translate-y-1 hover:scale-110 ${
            sessionData
              ? "bg-red-600"
              : "from-red-600 to-red-900 bg-gradient-to-tr"
          }`}
          style={{
            color: "white",
            background: "linear-gradient(45deg, #ff3d00, #ff1744)",
          }}
        >
          <button onClick={handleDeleteSelectedRows}>
            Izbriši izbrani zapis
          </button>
        </div>

        <div className="input-form-container mx-auto">
          <InputVoznik
            lastVoznjaId={lastVoznjaId}
            lastKonKm={lastKonKm}
            onAdd={handleAddMember}
          />
        </div>
      </main>
    </>
  );
}

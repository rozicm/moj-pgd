import React, { useState } from "react";
import Head from "next/head";
import Navbar from "~/components/Navbar";
import Image from "next/image";
import GCGP from "~/assets/img/GCGP.png";
import { useSession } from "next-auth/react";
import { api } from "~/utils/api";

interface EquipmentItem {
  id: number;
  naziv_opreme: string;
  kolicina: number;
  status_opreme: boolean;
  opis?: string | null; // Modified type to allow for null
}

export default function Oprema() {
  const { data, error, isLoading, refetch } = api.post.get_oprema.useQuery();
  const update = api.post.update_oprema_status.useMutation();
  const addOpis = api.post.update_opis.useMutation();
  const { data: sessionData } = useSession();
  const [showForm, setShowForm] = useState(false);
  const [selectedItemId, setSelectedItemId] = useState<number | null>(null);

  React.useEffect(() => {
    const delayRedirect = setTimeout(() => {
      if (!sessionData) {
        window.location.href = "/";
      }
    }, 1000);

    return () => clearTimeout(delayRedirect);
  }, [sessionData]);

  const handleStatusClick = async (
    oprema_id: number,
    status_opreme: boolean,
  ) => {
    const newStatus = !status_opreme;
    if (newStatus) {
      // If status is true, set opis to null
      try {
        await update.mutateAsync({ oprema_id, new_status: newStatus });
        await addOpis.mutateAsync({ oprema_id, new_opis: "" });
        await refetch();
      } catch (error) {
        console.error("Error updating status:", error);
      }
    } else {
      // If status is false, show form to update opis
      await update.mutateAsync({ oprema_id, new_status: newStatus });

      setShowForm(true);
      setSelectedItemId(oprema_id);
    }
  };

  const handleFormSubmit = async (opis: string) => {
    try {
      await addOpis.mutateAsync({ oprema_id: selectedItemId!, new_opis: opis });
      setShowForm(false);
      setSelectedItemId(null);
      await refetch();
    } catch (error) {
      console.error("Error updating description:", error);
    }
  };

  if (!sessionData) {
    return <div>Loading...</div>;
  }

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <>
      <Head>
        <title>MojPGD</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <div className="flex w-full flex-col items-center justify-center">
        <div className="navbar">
          <Navbar />
        </div>
      </div>
      <main className="flex min-h-screen items-center justify-center bg-gradient-to-b from-[#111827] to-magenta">
        <div className="pr-24 pt-24">
          <Image
            src={GCGP}
            alt="Description of your image"
            width={800}
            height={600}
            className="cool-image"
          />
        </div>

        <div
          className="custom-table-container mr-12 mt-10"
          style={{ maxHeight: "550px" }}
        >
          <table className="custom-table">
            <thead>
              <tr>
                <th className="w-2/12">Oprema ID</th>
                <th>Ime opreme</th>
                <th>Količina</th>
                <th>Status</th>
                <th>Opis</th>
              </tr>
            </thead>
            <tbody>
              {data.map((item: EquipmentItem) => (
                <tr key={item.id}>
                  <td>{item.id}</td>
                  <td>{item.naziv_opreme}</td>
                  <td>{item.kolicina}</td>
                  <td
                    style={{
                      cursor: "pointer",
                    }}
                    onClick={() =>
                      handleStatusClick(item.id, item.status_opreme)
                    }
                  >
                    <span
                      style={{
                        color: item.status_opreme
                          ? "rgba(0, 255, 0, 1)"
                          : "rgba(255, 0, 0, 1)",
                        fontSize: "24px",
                      }}
                    >
                      ●
                    </span>
                  </td>
                  <td>{item.opis || "/"}</td>{" "}
                </tr>
              ))}
            </tbody>
          </table>
          {showForm && (
            <DescriptionForm
              onSubmit={handleFormSubmit}
              onCancel={() => setShowForm(false)}
            />
          )}
        </div>
      </main>
    </>
  );
}

interface DescriptionFormProps {
  onSubmit: (opis: string) => void;
  onCancel: () => void;
}

function DescriptionForm({ onSubmit, onCancel }: DescriptionFormProps) {
  const [opis, setOpis] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(opis);
  };

  return (
    <div className="bg-black absolute left-0 top-0 flex h-full w-full items-center justify-center bg-opacity-50">
      <div className="bg-white rounded-md p-8">
        <h2 className="mb-4 text-xl font-bold">Enter Description</h2>
        <form onSubmit={handleSubmit}>
          <textarea
            className="border-gray-300 mb-4 h-24 w-full rounded-md border p-2"
            placeholder="Enter description..."
            value={opis}
            onChange={(e) => setOpis(e.target.value)}
            required
          />
          <div className="flex justify-between">
            <button
              type="submit"
              className="bg-blue-500 text-white hover:bg-blue-600 rounded-md px-4 py-2"
            >
              Submit
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="bg-gray-300 text-gray-700 hover:bg-gray-400 rounded-md px-4 py-2"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
